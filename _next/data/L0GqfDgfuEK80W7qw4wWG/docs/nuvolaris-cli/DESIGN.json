{"pageProps":{"content":"<!--\n  ~ Licensed to the Apache Software Foundation (ASF) under one\n  ~ or more contributor license agreements.  See the NOTICE file\n  ~ distributed with this work for additional information\n  ~ regarding copyright ownership.  The ASF licenses this file\n  ~ to you under the Apache License, Version 2.0 (the\n  ~ \"License\"); you may not use this file except in compliance\n  ~ with the License.  You may obtain a copy of the License at\n  ~\n  ~   http://www.apache.org/licenses/LICENSE-2.0\n  ~\n  ~ Unless required by applicable law or agreed to in writing,\n  ~ software distributed under the License is distributed on an\n  ~ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n  ~ KIND, either express or implied.  See the License for the\n  ~ specific language governing permissions and limitations\n  ~ under the License.\n  ~\n-->\n\n# Design\n\n**NOTE** This design is work in progress and incomplete - feel free to propose improvements but **please document the feature and send a PR to this design BEFORE implementing the feature** to avoid rejections and time wasted.\n\n## Goals\n\nThe tool `nuv` built in the repo [nuvolaris-cli](https://github.com/nuvolaris/nuvolaris-cli) it the Command Line Interface for the Nuvolaris project.\n\nIt embeds the functionalities of the tool [wsk](https://github.com/apache/openwhisk-cli) for creating actions. Since wsk is written in Go, we can directly include the code in `nuv`\n\nIt embeds the functionalities of the tool [task](https://taskfile.dev) for execution actions. Since task is written in Go, we can directly include the code in `nuv`\n\nIt also adds some project conventions inspired by the [nim](https://github.com/nimbella/nimbella-cli) tool. But since nim is written in typescript we do not include it, but will reimplement it. Most notably we want to reimplement the [project detection](#project-detection) heuristic described below and nothing else.\n\nThe tool works by scanning the current subtree, looking for actions and packages to deploy. It generates a `Taskfile` (that can be inspected by the users) and then executes it.\n\nIt will be possible to add customizations of the task adding locally `nuvolaris.yml` in the various subdirectories. This functionality will be described later.\n\nInitially, there will be 4 commands:\n\n- `nuv scan` scans the folder and generates a Taskfile \n- `nuv wsk` executes the wsk subcommand\n- `nuv task` executes the task subcommand\n- `nuv setup` will also be able to execute a kubectl command that deploys the `nuvolaris-operator` that in turns inizializes openwhisk in any available kubernetes accessible with `kubectl` and initialize the `.wskprops` file used by `nuv wsk`\n\nThe expected workflow is that:\n1. `nuv setup` installs an openwhisk cluster using `kubectl` configured in the path\n2. `nuv scan` generates a `Taskfile` \n3. `nuv task` executes the `Taskfile` that embeds many `nuv wsk` commands\n4. the various `nuv wsk` create then a full project\n\nAn example of a project to deploy can be [this](https://github.com/pagopa/io-sdk/tree/master/admin)\n\n## Project Detection\n`nuv` will scan the current directory looking for a folder named `packages` \n\nIf it finds here a file, it will create a package for each subfolder.\n\nIf it finds files in the file `packages`, it will deploy them as [single file actions](#single-file-actions) in the package `default`. If it finds files in the subfolders of `packages` it will deploy them as [single file actions](#single-file-actions) in packages named as the the subfolder. If it finds folders it will build [multi file actions](#multi-file-actions).\n\n## Single File Actions\n\nA single file actions is simply a file with an extension.\n\nThis extension can be one of the supported ones: `.js`  `.py` `.go` `.java` \n\nThis will cause the creation of an action with `--kind nodejs:default`, `--kind python:default`, `--kind go:default` and `--kind java:default` using the correct runtime.\n\nThe correct runtime is described by `runtime.json` that can be downloaded from the configured api host.\n\nIf the extension is in format:  `.<version>.<extension>`, it will deploy an action of  `--kind <language>:<version>`\n\n## Static frontend\n\nNuv is also able to deploy static frontends. A static front-end is a collection of static asset under a given folder that will be published in a web server under a path. \n\nA folder containing static (web) assets is always named `web` and can be placed in different parts in the folder hierarchy. The path in the website where is published depends on the location in the hierarchy, as described below.\n\nBefore publishing, `nuv` executes some build commands.\n\n### Hostname\n\nIn general, for each namespace there will be a `https://<namespace>.<domain>` website where to publish the resources. For the local deployment there will be a website `http://127.0.0.1:8080` where the resources are published, with the namespace and the domain ignored.\n\n### Path detection\n\nThe path where the assets are published depends on the path in the action hierarchy.\n\nThe sub-folder `web` is published as \"/\".\n\nAny subfolder `web` under `packages/<package>/web` is published unser `/<packages>/`.\n\nAny subfolder `web` under `packages/default/<action>\\web` is published as `/<action>`.\n\nAny subfolder `web` under `packages/<package>/<action>/web` is published as `/<package>/<action>`\n\nWhat is published (files collected) and how it is built is defined by the next paragraph.\n\n### Building and Collecting\n\nIn every folder `web` it will check if there is a `nuvolaris.json`\n\nIf there is not a `nuvolaris.json` and not a `package.json` it will assume this base `nuvolaris.json`:\n\n```\n{\n  \"collect\": \".\",\n  \"install\": \"echo nothing to install\",\n  \"build\": \"echo nothing to build\"\n}\n```\n\nIf instead there is `packages.json`, it will assume this base `nuvolaris.json`:\n\n```\n{\n  \"collect\": \"public\",\n  \"install\": \"npm install\",\n  \"build\": \"npm run build\"\n}\n```\n\nThe it will read the `nuvolaris.json` replacing the keys in it with the default ones.\n\nThe generated taskfile will execute at deployment step:\n\n- the command defined by `install` only if there is not a `node_modules`\n- the command defined by `build` always\n- then it will collect for publishing (creating a crd instance) the files in the folder defined by `collect`\n\nIt is recommended that `nuv scan` does not execute directy the command but instead it delegates to another command like `nuv build` and in turn the creation of `crd` to another `nuv crd` subcommand, after changing to the corresponding suddirectory. All those commands should work by default in current directory. \n\n\n\n\n## Multi File Actions\n\n**initial draft**\n\nA multi-file action is stored in a subfolder of a subfolder of `packages`.\n\nThis is expected to be a file to build.\n\n`nuv` implements some heuristics to decide the correct type of the file to build.\n\nCurrently:\n\n- if there is a `package.json`  or any `js` field in the folder then it is  `.js` and it builds with `npm install ; npm build`\n- if there is a `requirements.txt` or any `.py` file then it is python and it builds creating a virtual env as described in the python runtime documentation\n- if there is `pom.xml` then it builds using `mvn install`\n- if there is a `go.mod` then it builds using `go build`\n\nthen it will zip the folder and send as an action of the current type to the runtime.\n\n\n\n\n\n\n\n","slug":"nuvolaris-cli","markdown":"DESIGN"},"__N_SSG":true}